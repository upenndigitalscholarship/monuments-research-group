---
title: Main
layout: base.njk
---

<div class="card">
    <div class="card-body">
        <h3>Welcome to the Perspectives on Confederate Commemoration from the Black Press project!</h3>

        <p>The articles gathered here tell the stories of how Black journalists from the late nineteenth century to the present viewed efforts by white Southerners to celebrate the Confederacy in the long aftermath of the US Civil War.</p>

        <p>Read an <a href="introduction">introduction to the project here</a> or <a href="essays">start browsing.</a></p>
        
        <div class="content-warning">
        <em>Black journalists in the post-Reconstruction era unflinchingly documented the white supremacist violence, both physical and psychological, inflicted on Black people during this period. Wherever possible, we have used the language and descriptions presented in these materials to faithfully convey the pain and sense of urgency of their moment. Readers can expect to find offensive language and references to violent episodes in these articles.</em>
        </div>
    </div>
</div>

<div id="filter-box">
    {# for each unique lable in collections.essays , add a button #}
    <script>
        let colors = [
                '#ff0000',
                '#00ff00',
                '#0000ff',
                '#ffff00',
                '#00ffff',
                '#ff00ff',
                '#ffffff'
            ]
            let colorLookup = {}
            {% for essay in collections.essays %}
                {% if essay.data.lat and essay.data.long %}
                    // see if the topic is already in the points object
                    if (!colorLookup.hasOwnProperty('{{ essay.data.topic | slugify }}')) {
                        // if it is, add the new point to the array
                        let color = colors[Math.floor(Math.random() * colors.length)];
                        colorLookup['{{ essay.data.topic | slugify }}'] = color;
                        // remove color from colors
                        colors.splice(colors.indexOf(color), 1);
                    } 
                {% endif %}
            {% endfor %}
    </script>
    <div class="card bg-black" style="width: 18rem;">

    {% for topic in collections.essays | getUniqueTopics %}
        <button type="button" class="btn btn-dark filter-button" data-label="{{ topic | slugify }}">{{ topic }}</button><br>
        {# add event to button on click #}
        <script>
            
            document
                .querySelector("[data-label='{{ topic | slugify }}']")
                .addEventListener('click', function () {
                    console.log(this.dataset.label);
                    // filter essays using points object
                    // remove all markers from map
                    map.eachLayer(function (layer) {
                        if (layer instanceof L.Marker) {
                            map.removeLayer(layer);
                        }
                    });
                    markers.clearLayers();
                    // reset zoom to 5
                    map.setView([
                        39.44483435516343, -99.33589354231967
                    ], 5);
                    for (let topic in points) {
                        if (topic == this.dataset.label) {
                            let color = colors[Math.floor(Math.random() * colors.length)];
                            for (let point of points[topic]) {
                                markers.addLayer(L.marker([
                                    point.lat, point.long
                                ], {
                                    title: point.topic,
                                    icon: L.divIcon({
                                        className: 'my-div-icon',
                                        html: '<svg width="20" height="20"><circle cx="10" cy="10" r="10" fill="' + colorLookup[point.topic] + '" /></svg>'
                                    })
                                }).bindPopup(point.popup));
                                map.addLayer(markers);

                            }
                        }
                    }

                });
            document
                .querySelector('[data-label="{{ topic | slugify }}"]')
                .insertAdjacentHTML('beforeend', `&nbsp;&nbsp;<svg width="20" height="20"><circle cx="10" cy="10" r="10" fill="${colorLookup['{{ topic | slugify }}']}" /></svg>`)
        </script>
        
    {% endfor %}
<button class="btn btn-dark filter-button" data-label="reset">Reset</button><br>
        <script>
            document
                .querySelector('[data-label="reset"]')
                .addEventListener('click', function () {
                    // filter essays using points object
                    // remove all markers from map
                    map.eachLayer(function (layer) {
                        if (layer instanceof L.Marker) {
                            map.removeLayer(layer);
                        }
                    });
                    markers.clearLayers();
                    // reset zoom to 5
                    map.setView([
                        39.44483435516343, -99.33589354231967
                    ], 5);
                    for (let topic in points) {
                        let color = colors[Math.floor(Math.random() * colors.length)];
                        for (let point of points[topic]) {
                            markers.addLayer(L.marker([
                                point.lat, point.long
                            ], {
                                title: point.topic,
                                icon: L.divIcon({
                                    className: 'my-div-icon',
                                    html: '<svg width="20" height="20"><circle cx="10" cy="10" r="10" fill="' + colorLookup[point.topic] + '" /></svg>'
                                })
                            }).bindPopup(point.popup));
                            map.addLayer(markers);

                        }
                    }

                });
        </script>
</div>

</div>

<style>
    #map {
        height: 70vh;
        border-radius: 5px;
    }

    #filter-box {
        position: absolute;
        top: 40vh;
        left: 20px;
        z-index: 999;
    }

    .filter-button {
        margin-bottom: 10px;
    }
</style>

<div id="map"></div>




<link rel="stylesheet" href="/assets/css/leaflet.css"
    
     crossorigin=""/>

<script src="/assets/js/leaflet.js"
     crossorigin=""></script>
<script src="/assets/js/leaflet.markercluster.js"
     crossorigin=""></script>
<script>
    
    let map = L
        .map('map')
        .setView([
            39.44483435516343, -99.33589354231967
        ], 5);
    L
        .tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '',
            subdomains: 'abcd',
            maxZoom: 20,
        })
        .addTo(map);
    let markers = L.markerClusterGroup();
    let points = {};
    {% for essay in collections.essays %}
        {% if essay.data.lat and essay.data.long %}
            // see if the topic is already in the points object
            if (points.hasOwnProperty('{{ essay.data.topic | slugify }}')) {
                // if it is, add the new point to the array
                points['{{ essay.data.topic | slugify}}'].push({'lat': {{ essay.data.lat }}, 'long': {{ essay.data.long }}, 'topic': '{{ essay.data.topic | slugify }}', 'popup': '<h4 class="fw-bold text-black"><a href="/essay/{{ essay.fileSlug }}">{{ essay.data.title }}</a></h4><p>{{ essay.content|snippet|safe  }}...</p>'});
            } else {
                // if it isn't, create a new array with the point
                points['{{ essay.data.topic | slugify}}'] = [];
                points['{{ essay.data.topic | slugify}}'].push({'lat': {{ essay.data.lat }}, 'long': {{ essay.data.long }}, 'topic': '{{ essay.data.topic | slugify }}', 'popup': '<h4 class="fw-bold text-black"><a href="/essay/{{ essay.fileSlug }}">{{ essay.data.title }}</a></h4><p>{{ essay.content|snippet|safe }}...</p>'});
                
            }
        {% endif %}
    {% endfor %}

    // loop through the points object and add the markers
    for (let topic in points) {
        // pick a color from colors
        // save color to points object
        for (let point of points[topic]) {
            markers.addLayer(L.marker([
                point.lat, point.long
            ], {
                title: point.topic,
                icon: L.divIcon({
                    className: 'my-div-icon',
                    html: '<svg width="20" height="20"><circle cx="10" cy="10" r="10" fill="' + colorLookup[point.topic] + '" /></svg>'
                })
            }).bindPopup(point.popup));
            map.addLayer(markers);
            
        }
    }

let adjustFilterbox = () => {
    let filterbox = document.querySelector('#filter-box');
    filterbox.style.top = map._container.offsetTop + 120 + 'px';
}    
adjustFilterbox();
map.on('resize', adjustFilterbox);

</script>