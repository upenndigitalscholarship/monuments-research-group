---
title: Main
layout: base.njk
---

<div class="card">
    <div class="card-body">
        <h3>Welcome to the Historic Black Perspectives on Confederate Commemoration project!</h3>

        <p>The articles gathered here tell the stories of how Black journalists from the late nineteenth century to the present viewed efforts by white Southerners to celebrate the Confederacy in the long aftermath of the US Civil War.</p>

        <p>Read an <a href="introduction">introduction to the project here</a> or start browsing!</p>

    </div>
</div>

<div id="filter-box">
    {# for each unique lable in collections.essays , add a button #}
    {% for topic in collections.essays | getUniqueTopics %}
        <button class="filter-button" data-label="{{ topic }}">{{ topic }}</button><br>
        {# add event to button on click #}
        <script>
            document
                .querySelector('[data-label="{{ topic }}"]')
                .addEventListener('click', function () {
                    console.log(this.dataset.label);
                    // filter essays using points object
                    // remove all markers from map
                    map.eachLayer(function (layer) {
                        if (layer instanceof L.Marker) {
                            map.removeLayer(layer);
                        }
                    });
                    markers.clearLayers();
                    for (let topic in points) {
                        if (topic == this.dataset.label) {
                            let color = colors[Math.floor(Math.random() * colors.length)];
                            for (let point of points[topic]) {
                                markers.addLayer(L.marker([
                                    point.lat, point.long
                                ], {
                                    title: point.topic,
                                    icon: L.divIcon({
                                        className: 'my-div-icon',
                                        html: '<svg width="20" height="20"><circle cx="10" cy="10" r="10" fill="' + color + '" /></svg>'
                                    })
                                }).bindPopup(point.popup));
                                map.addLayer(markers);

                            }
                        }
                    }

                });
        </script>
    {% endfor %}

</div>

<style>
    #map {
        height: 60vh;
    }

    #filter-box {
        position: absolute;
        top: 40vh;
        left: 20px;
        z-index: 999;
    }

    .filter-button {
        margin-bottom: 10px;
    }
</style>

<div id="map"></div>

<link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/MarkerCluster.css" />
<link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/MarkerCluster.Default.css" />


<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>
<script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"
     crossorigin=""></script>
<script>
    let colors = [
        '#ff0000',
        '#00ff00',
        '#0000ff',
        '#ffff00',
        '#00ffff',
        '#ff00ff',
        '#ffffff'
    ]
    let map = L
        .map('map')
        .setView([
            40.26029244302987, -90.23749139976277
        ], 5);
    L
        .tileLayer('https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '',
            subdomains: 'abcd',
            maxZoom: 20
        })
        .addTo(map);
    let markers = L.markerClusterGroup();
    let points = {};
    {% for essay in collections.essays %}
        {% if essay.data.lat and essay.data.long %}
            // see if the topic is already in the points object
            if (points.hasOwnProperty('{{ essay.data.topic }}')) {
                // if it is, add the new point to the array
                points['{{ essay.data.topic }}'].push({'lat': {{ essay.data.lat }}, 'long': {{ essay.data.long }}, 'topic': '{{ essay.data.topic }}', 'popup': '<a href="/essay/{{ essay.fileSlug }}">{{ essay.data.title }}</a>'});
            } else {
                // if it isn't, create a new array with the point
                points['{{ essay.data.topic }}'] = [];
                points['{{ essay.data.topic }}'].push({'lat': {{ essay.data.lat }}, 'long': {{ essay.data.long }}, 'topic': '{{ essay.data.topic }}', 'popup': '<a href="/essay/{{ essay.fileSlug }}">{{ essay.data.title }}</a>'});
            }
        {% endif %}
    {% endfor %}

    // loop through the points object and add the markers
    for (let topic in points) {
        // pick a color from colors
        let color = colors[Math.floor(Math.random() * colors.length)];
        for (let point of points[topic]) {
            markers.addLayer(L.marker([
                point.lat, point.long
            ], {
                title: point.topic,
                icon: L.divIcon({
                    className: 'my-div-icon',
                    html: '<svg width="20" height="20"><circle cx="10" cy="10" r="10" fill="' + color + '" /></svg>'
                })
            }).bindPopup(point.popup));
            map.addLayer(markers);

        }
    }
</script>